READ ALL ROWS
let { data: beitraege, error } = await supabase
  .from('beitraege')
  .select('*')

READ SPECIFIC COLUMNS
let { data: beitraege, error } = await supabase
  .from('beitraege')
  .select('some_column,other_column')

READ REFERENCED TABLES
let { data: beitraege, error } = await supabase
  .from('beitraege')
  .select(`
    some_column,
    other_table (
      foreign_key
    )
  `)


let { data: beitraege, error } = await supabase
  .from('beitraege')
  .select("*")
  // Filters
  .eq('column', 'Equal to')
  .gt('column', 'Greater than')
  .lt('column', 'Less than')
  .gte('column', 'Greater than or equal to')
  .lte('column', 'Less than or equal to')
  .like('column', '%CaseSensitive%')
  .ilike('column', '%CaseInsensitive%')
  .is('column', null)
  .in('column', ['Array', 'Values'])
  .neq('column', 'Not equal to')
  // Arrays
  .contains('array_column', ['array', 'contains'])
  .containedBy('array_column', ['contained', 'by'])



const { data, error } = await supabase
  .from('beitraege')
  .insert([
    { some_column: 'someValue', other_column: 'otherValue' },
  ])
  .select()


const { data, error } = await supabase
  .from('beitraege')
  .insert([
    { some_column: 'someValue' },
    { some_column: 'otherValue' },
  ])
  .select()


const { data, error } = await supabase
  .from('beitraege')
  .upsert({ some_column: 'someValue' })
  .select()


const { data, error } = await supabase
  .from('beitraege')
  .update({ other_column: 'otherValue' })
  .eq('some_column', 'someValue')
  .select()


const { error } = await supabase
  .from('beitraege')
  .delete()
  .eq('some_column', 'someValue')

